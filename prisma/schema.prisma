generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                    String                 @id @default(cuid())
  externalId            String?                @unique
  quotaLimit            Int
  plan                  Plan                   @default(FREE)
  email                 String                 @unique
  apiKey                String                 @unique @default(cuid())
  discordId             String?
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
  events                Event[]
  EventCategories       EventCategory[]
  Quota                 Quota?
  notificationChannels  NotificationChannel[]
  routingRules          RoutingRule[]
  eventTemplates        EventTemplate[]
  alertRules            AlertRule[]

  @@index([email, apiKey])
}

model EventCategory {
  id                    String                 @id @default(cuid())
  name                  String
  color                 Int
  emoji                 String?
  userId                String
  description           String?
  isActive              Boolean                @default(true)
  priority              Priority               @default(MEDIUM)
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
  events                Event[]
  user                  User                   @relation(fields: [userId], references: [id])

  @@unique([name, userId])
}

model Event {
  id                    String                 @id @default(cuid())
  formattedMessage      String
  userId                String
  name                  String
  fields                Json
  metadata              Json?                  // Enhanced metadata
  severity              Severity               @default(INFO)
  priority              Priority               @default(MEDIUM)
  source                String?                // Source system/service
  correlationId         String?                // For event correlation
  parentEventId         String?                // For event hierarchies
  tags                  String[]               // Searchable tags
  deliveryStatus        DeliveryStatus         @default(PENDING)
  retryCount            Int                    @default(0)
  lastRetryAt           DateTime?
  deliveredAt           DateTime?
  failureReason         String?
  processingDuration    Int?                   // Processing time in ms
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
  eventCategoryId       String?
  EventCategory         EventCategory?         @relation(fields: [eventCategoryId], references: [id])
  user                  User                   @relation(fields: [userId], references: [id])
  notifications         Notification[]
  eventMetrics          EventMetric[]
  
  // Self-referencing for event hierarchies
  parentEvent           Event?                 @relation("EventHierarchy", fields: [parentEventId], references: [id])
  childEvents           Event[]                @relation("EventHierarchy")

  @@index([createdAt])
  @@index([correlationId])
  @@index([severity])
  @@index([tags])
}

model NotificationChannel {
  id            String                @id @default(cuid())
  name          String
  type          ChannelType
  userId        String
  config        Json                  // Channel-specific configuration
  isActive      Boolean               @default(true)
  priority      Priority              @default(MEDIUM)
  retryConfig   Json?                 // Retry configuration
  createdAt     DateTime              @default(now())
  updatedAt     DateTime              @updatedAt
  user          User                  @relation(fields: [userId], references: [id])
  notifications Notification[]
  routingRules  RoutingRule[]

  @@unique([name, userId])
}

model RoutingRule {
  id                    String               @id @default(cuid())
  name                  String
  userId                String
  conditions            Json                 // Complex condition logic
  actions               Json                 // Actions to perform
  priority              Int                  @default(0)
  isActive              Boolean              @default(true)
  createdAt             DateTime             @default(now())
  updatedAt             DateTime             @updatedAt
  user                  User                 @relation(fields: [userId], references: [id])
  notificationChannels  NotificationChannel[]

  @@unique([name, userId])
}

model EventTemplate {
  id            String    @id @default(cuid())
  name          String
  userId        String
  channelType   ChannelType
  template      Json      // Template configuration
  isActive      Boolean   @default(true)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  user          User      @relation(fields: [userId], references: [id])

  @@unique([name, userId, channelType])
}

model Notification {
  id                    String               @id @default(cuid())
  eventId               String
  channelId             String
  status                DeliveryStatus       @default(PENDING)
  attempts              Int                  @default(0)
  lastAttemptAt         DateTime?
  deliveredAt           DateTime?
  failureReason         String?
  responseData          Json?                // Response from channel
  metadata              Json?
  createdAt             DateTime             @default(now())
  updatedAt             DateTime             @updatedAt
  event                 Event                @relation(fields: [eventId], references: [id])
  channel               NotificationChannel  @relation(fields: [channelId], references: [id])

  @@index([status])
  @@index([createdAt])
}

model AlertRule {
  id            String    @id @default(cuid())
  name          String
  userId        String
  conditions    Json      // Alert conditions
  actions       Json      // Alert actions
  isActive      Boolean   @default(true)
  cooldownMs    Int       @default(300000) // 5 minutes
  lastTriggered DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  user          User      @relation(fields: [userId], references: [id])

  @@unique([name, userId])
}

model EventMetric {
  id              String   @id @default(cuid())
  eventId         String
  metricName      String
  metricValue     Float
  metricType      MetricType
  timestamp       DateTime @default(now())
  metadata        Json?
  event           Event    @relation(fields: [eventId], references: [id])

  @@index([metricName])
  @@index([timestamp])
}

model Quota {
  id        String   @id @default(cuid())
  userId    String   @unique
  year      Int
  month     Int
  count     Int      @default(0)
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
}

enum Plan {
  FREE
  PRO
  ENTERPRISE
}

enum DeliveryStatus {
  PENDING
  DELIVERED
  FAILED
  RETRYING
  CANCELLED
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum Severity {
  DEBUG
  INFO
  WARNING
  ERROR
  CRITICAL
}

enum ChannelType {
  DISCORD
  WEBHOOK
  EMAIL
  SLACK
  TEAMS
  SMS
  PUSH
}

enum MetricType {
  COUNTER
  GAUGE
  HISTOGRAM
  TIMER
}
